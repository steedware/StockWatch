<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Dockerfile" />
              <option name="updatedContent" value="FROM openjdk:21-jdk-slim&#10;&#10;WORKDIR /app&#10;&#10;COPY target/StockWatch-1.0-SNAPSHOT.jar app.jar&#10;&#10;EXPOSE 8080&#10;&#10;ENV JAVA_OPTS=&quot;&quot;&#10;&#10;ENTRYPOINT [&quot;sh&quot;, &quot;-c&quot;, &quot;java $JAVA_OPTS -jar app.jar&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docker-compose.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker-compose.yml" />
              <option name="originalContent" value="version: '3.8'&#10;&#10;services:&#10;  postgres:&#10;    image: postgres:15-alpine&#10;    environment:&#10;      POSTGRES_DB: stockwatch&#10;      POSTGRES_USER: stockwatch&#10;      POSTGRES_PASSWORD: stockwatch&#10;    ports:&#10;      - &quot;5432:5432&quot;&#10;    volumes:&#10;      - postgres_data:/var/lib/postgresql/data&#10;    healthcheck:&#10;      test: [&quot;CMD-SHELL&quot;, &quot;pg_isready -U stockwatch&quot;]&#10;      interval: 10s&#10;      timeout: 5s&#10;      retries: 5&#10;&#10;  stockwatch-app:&#10;    build: .&#10;    ports:&#10;      - &quot;8080:8080&quot;&#10;    environment:&#10;      SPRING_PROFILES_ACTIVE: docker&#10;      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/stockwatch&#10;      SPRING_DATASOURCE_USERNAME: stockwatch&#10;      SPRING_DATASOURCE_PASSWORD: stockwatch&#10;    depends_on:&#10;      postgres:&#10;        condition: service_healthy&#10;    volumes:&#10;      - ./logs:/app/logs&#10;&#10;volumes:&#10;  postgres_data:&#10;" />
              <option name="updatedContent" value="version: '3.8'&#10;&#10;services:&#10;  postgres:&#10;    image: postgres:15-alpine&#10;    environment:&#10;      POSTGRES_DB: stockwatch&#10;      POSTGRES_USER: stockwatch&#10;      POSTGRES_PASSWORD: stockwatch&#10;    ports:&#10;      - &quot;5433:5432&quot;&#10;    volumes:&#10;      - postgres_data:/var/lib/postgresql/data&#10;    healthcheck:&#10;      test: [&quot;CMD-SHELL&quot;, &quot;pg_isready -U stockwatch&quot;]&#10;      interval: 10s&#10;      timeout: 5s&#10;      retries: 5&#10;&#10;  stockwatch-app:&#10;    build: .&#10;    ports:&#10;      - &quot;8080:8080&quot;&#10;    environment:&#10;      SPRING_PROFILES_ACTIVE: docker&#10;      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/stockwatch&#10;      SPRING_DATASOURCE_USERNAME: stockwatch&#10;      SPRING_DATASOURCE_PASSWORD: stockwatch&#10;    depends_on:&#10;      postgres:&#10;        condition: service_healthy&#10;    volumes:&#10;      - ./logs:/app/logs&#10;&#10;volumes:&#10;  postgres_data:" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/package.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/package.json" />
              <option name="originalContent" value="{&#10;  &quot;name&quot;: &quot;stockwatch-frontend&quot;,&#10;  &quot;version&quot;: &quot;0.1.0&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;dependencies&quot;: {&#10;    &quot;@types/node&quot;: &quot;^18.19.0&quot;,&#10;    &quot;@types/react&quot;: &quot;^18.2.45&quot;,&#10;    &quot;@types/react-dom&quot;: &quot;^18.2.18&quot;,&#10;    &quot;axios&quot;: &quot;^1.6.5&quot;,&#10;    &quot;react&quot;: &quot;^18.2.0&quot;,&#10;    &quot;react-dom&quot;: &quot;^18.2.0&quot;,&#10;    &quot;react-scripts&quot;: &quot;5.0.1&quot;,&#10;    &quot;typescript&quot;: &quot;^5.3.3&quot;,&#10;    &quot;web-vitals&quot;: &quot;^3.5.0&quot;,&#10;    &quot;@mui/material&quot;: &quot;^5.15.0&quot;,&#10;    &quot;@emotion/react&quot;: &quot;^11.11.1&quot;,&#10;    &quot;@emotion/styled&quot;: &quot;^11.11.0&quot;,&#10;    &quot;@mui/icons-material&quot;: &quot;^5.15.0&quot;&#10;  },&#10;  &quot;scripts&quot;: {&#10;    &quot;start&quot;: &quot;react-scripts start&quot;,&#10;    &quot;build&quot;: &quot;react-scripts build&quot;,&#10;    &quot;test&quot;: &quot;react-scripts test&quot;,&#10;    &quot;eject&quot;: &quot;react-scripts eject&quot;&#10;  },&#10;  &quot;eslintConfig&quot;: {&#10;    &quot;extends&quot;: [&#10;      &quot;react-app&quot;,&#10;      &quot;react-app/jest&quot;&#10;    ]&#10;  },&#10;  &quot;browserslist&quot;: {&#10;    &quot;production&quot;: [&#10;      &quot;&gt;0.2%&quot;,&#10;      &quot;not dead&quot;,&#10;      &quot;not op_mini all&quot;&#10;    ],&#10;    &quot;development&quot;: [&#10;      &quot;last 1 chrome version&quot;,&#10;      &quot;last 1 firefox version&quot;,&#10;      &quot;last 1 safari version&quot;&#10;    ]&#10;  },&#10;  &quot;proxy&quot;: &quot;http://localhost:8080&quot;&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;name&quot;: &quot;stockwatch-frontend&quot;,&#10;  &quot;version&quot;: &quot;0.1.0&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;dependencies&quot;: {&#10;    &quot;@types/node&quot;: &quot;^16.18.0&quot;,&#10;    &quot;@types/react&quot;: &quot;^18.0.0&quot;,&#10;    &quot;@types/react-dom&quot;: &quot;^18.0.0&quot;,&#10;    &quot;axios&quot;: &quot;^1.6.0&quot;,&#10;    &quot;react&quot;: &quot;^18.2.0&quot;,&#10;    &quot;react-dom&quot;: &quot;^18.2.0&quot;,&#10;    &quot;react-scripts&quot;: &quot;5.0.1&quot;,&#10;    &quot;typescript&quot;: &quot;^4.9.5&quot;,&#10;    &quot;web-vitals&quot;: &quot;^2.1.0&quot;,&#10;    &quot;@mui/material&quot;: &quot;^5.14.0&quot;,&#10;    &quot;@emotion/react&quot;: &quot;^11.11.0&quot;,&#10;    &quot;@emotion/styled&quot;: &quot;^11.11.0&quot;,&#10;    &quot;@mui/icons-material&quot;: &quot;^5.14.0&quot;&#10;  },&#10;  &quot;scripts&quot;: {&#10;    &quot;start&quot;: &quot;react-scripts start&quot;,&#10;    &quot;build&quot;: &quot;react-scripts build&quot;,&#10;    &quot;test&quot;: &quot;react-scripts test&quot;,&#10;    &quot;eject&quot;: &quot;react-scripts eject&quot;&#10;  },&#10;  &quot;eslintConfig&quot;: {&#10;    &quot;extends&quot;: [&#10;      &quot;react-app&quot;,&#10;      &quot;react-app/jest&quot;&#10;    ]&#10;  },&#10;  &quot;browserslist&quot;: {&#10;    &quot;production&quot;: [&#10;      &quot;&gt;0.2%&quot;,&#10;      &quot;not dead&quot;,&#10;      &quot;not op_mini all&quot;&#10;    ],&#10;    &quot;development&quot;: [&#10;      &quot;last 1 chrome version&quot;,&#10;      &quot;last 1 firefox version&quot;,&#10;      &quot;last 1 safari version&quot;&#10;    ]&#10;  },&#10;  &quot;proxy&quot;: &quot;http://localhost:8080&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/index.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/index.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import ReactDOM from 'react-dom/client';&#10;import App from './App.tsx';&#10;&#10;const root = ReactDOM.createRoot(&#10;  document.getElementById('root') as HTMLElement&#10;);&#10;root.render(&#10;  &lt;React.StrictMode&gt;&#10;    &lt;App /&gt;&#10;  &lt;/React.StrictMode&gt;&#10;);&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import ReactDOM from 'react-dom/client';&#10;import App from './App';&#10;&#10;const root = ReactDOM.createRoot(&#10;  document.getElementById('root') as HTMLElement&#10;);&#10;root.render(&#10;  &lt;React.StrictMode&gt;&#10;    &lt;App /&gt;&#10;  &lt;/React.StrictMode&gt;&#10;);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/services/api.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/services/api.ts" />
              <option name="originalContent" value="import axios, { AxiosResponse } from 'axios';&#10;import {&#10;  AuthResponse,&#10;  LoginRequest,&#10;  RegisterRequest,&#10;  WatchedStock,&#10;  WatchedStockRequest,&#10;  Alert&#10;} from '../types';&#10;&#10;const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';&#10;&#10;const api = axios.create({&#10;  baseURL: API_BASE_URL,&#10;});&#10;&#10;api.interceptors.request.use((config) =&gt; {&#10;  const token = localStorage.getItem('token');&#10;  if (token) {&#10;    config.headers.Authorization = `Bearer ${token}`;&#10;  }&#10;  return config;&#10;});&#10;&#10;// Dodanie interceptora dla obsługi błędów odpowiedzi&#10;api.interceptors.response.use(&#10;  (response) =&gt; response,&#10;  (error) =&gt; {&#10;    if (error.response?.status === 401) {&#10;      // Token wygasł lub jest nieprawidłowy&#10;      localStorage.removeItem('token');&#10;      localStorage.removeItem('user');&#10;      window.location.href = '/';&#10;    }&#10;    return Promise.reject(error);&#10;  }&#10;);&#10;&#10;export const authService = {&#10;  login: async (credentials: LoginRequest): Promise&lt;AuthResponse&gt; =&gt; {&#10;    const response: AxiosResponse&lt;AuthResponse&gt; = await api.post('/auth/login', credentials);&#10;    return response.data;&#10;  },&#10;&#10;  register: async (userData: RegisterRequest): Promise&lt;AuthResponse&gt; =&gt; {&#10;    const response: AxiosResponse&lt;AuthResponse&gt; = await api.post('/auth/register', userData);&#10;    return response.data;&#10;  },&#10;&#10;  logout: () =&gt; {&#10;    localStorage.removeItem('token');&#10;    localStorage.removeItem('user');&#10;  },&#10;&#10;  getCurrentUser: () =&gt; {&#10;    const user = localStorage.getItem('user');&#10;    return user ? JSON.parse(user) : null;&#10;  },&#10;&#10;  isAuthenticated: () =&gt; {&#10;    return !!localStorage.getItem('token');&#10;  }&#10;};&#10;&#10;export const watchlistService = {&#10;  getWatchlist: async (): Promise&lt;WatchedStock[]&gt; =&gt; {&#10;    const response: AxiosResponse&lt;WatchedStock[]&gt; = await api.get('/watchlist');&#10;    return response.data;&#10;  },&#10;&#10;  addStock: async (stockData: WatchedStockRequest): Promise&lt;WatchedStock&gt; =&gt; {&#10;    const response: AxiosResponse&lt;WatchedStock&gt; = await api.post('/watchlist', stockData);&#10;    return response.data;&#10;  },&#10;&#10;  updateStock: async (id: number, stockData: WatchedStockRequest): Promise&lt;WatchedStock&gt; =&gt; {&#10;    const response: AxiosResponse&lt;WatchedStock&gt; = await api.put(`/watchlist/${id}`, stockData);&#10;    return response.data;&#10;  },&#10;&#10;  removeStock: async (id: number): Promise&lt;void&gt; =&gt; {&#10;    await api.delete(`/watchlist/${id}`);&#10;  }&#10;};&#10;&#10;export const alertService = {&#10;  getAlerts: async (page: number = 0, size: number = 20): Promise&lt;Alert[]&gt; =&gt; {&#10;    const response: AxiosResponse&lt;Alert[]&gt; = await api.get('/alerts', {&#10;      params: { page, size }&#10;    });&#10;    return response.data;&#10;  },&#10;&#10;  getUnreadAlerts: async (): Promise&lt;Alert[]&gt; =&gt; {&#10;    const response: AxiosResponse&lt;Alert[]&gt; = await api.get('/alerts/unread');&#10;    return response.data;&#10;  },&#10;&#10;  getUnreadCount: async (): Promise&lt;number&gt; =&gt; {&#10;    const response: AxiosResponse&lt;number&gt; = await api.get('/alerts/unread/count');&#10;    return response.data;&#10;  },&#10;&#10;  markAsRead: async (alertIds: number[]): Promise&lt;void&gt; =&gt; {&#10;    await api.put('/alerts/mark-read', alertIds);&#10;  }&#10;};&#10;" />
              <option name="updatedContent" value="import axios, { AxiosResponse } from 'axios';&#10;import {&#10;  AuthResponse,&#10;  LoginRequest,&#10;  RegisterRequest,&#10;  WatchedStock,&#10;  WatchedStockRequest,&#10;  Alert&#10;} from '../types';&#10;&#10;const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';&#10;&#10;const api = axios.create({&#10;  baseURL: API_BASE_URL,&#10;});&#10;&#10;api.interceptors.request.use((config) =&gt; {&#10;  const token = localStorage.getItem('token');&#10;  if (token) {&#10;    config.headers.Authorization = `Bearer ${token}`;&#10;  }&#10;  return config;&#10;});&#10;&#10;// Dodanie interceptora dla obsługi błędów odpowiedzi&#10;api.interceptors.response.use(&#10;  (response) =&gt; response,&#10;  (error) =&gt; {&#10;    if (error.response?.status === 401) {&#10;      // Token wygasł lub jest nieprawidłowy&#10;      localStorage.removeItem('token');&#10;      localStorage.removeItem('user');&#10;      // Zamiast przekierowania, wyrzuć błąd który zostanie obsłużony w komponencie&#10;      return Promise.reject(new Error('Unauthorized - please login again'));&#10;    }&#10;    return Promise.reject(error);&#10;  }&#10;);&#10;&#10;export const authService = {&#10;  login: async (credentials: LoginRequest): Promise&lt;AuthResponse&gt; =&gt; {&#10;    const response: AxiosResponse&lt;AuthResponse&gt; = await api.post('/auth/login', credentials);&#10;    return response.data;&#10;  },&#10;&#10;  register: async (userData: RegisterRequest): Promise&lt;AuthResponse&gt; =&gt; {&#10;    const response: AxiosResponse&lt;AuthResponse&gt; = await api.post('/auth/register', userData);&#10;    return response.data;&#10;  },&#10;&#10;  logout: () =&gt; {&#10;    localStorage.removeItem('token');&#10;    localStorage.removeItem('user');&#10;  },&#10;&#10;  getCurrentUser: () =&gt; {&#10;    const user = localStorage.getItem('user');&#10;    return user ? JSON.parse(user) : null;&#10;  },&#10;&#10;  isAuthenticated: () =&gt; {&#10;    return !!localStorage.getItem('token');&#10;  }&#10;};&#10;&#10;export const watchlistService = {&#10;  getWatchlist: async (): Promise&lt;WatchedStock[]&gt; =&gt; {&#10;    const response: AxiosResponse&lt;WatchedStock[]&gt; = await api.get('/watchlist');&#10;    return response.data;&#10;  },&#10;&#10;  addStock: async (stockData: WatchedStockRequest): Promise&lt;WatchedStock&gt; =&gt; {&#10;    const response: AxiosResponse&lt;WatchedStock&gt; = await api.post('/watchlist', stockData);&#10;    return response.data;&#10;  },&#10;&#10;  updateStock: async (id: number, stockData: WatchedStockRequest): Promise&lt;WatchedStock&gt; =&gt; {&#10;    const response: AxiosResponse&lt;WatchedStock&gt; = await api.put(`/watchlist/${id}`, stockData);&#10;    return response.data;&#10;  },&#10;&#10;  removeStock: async (id: number): Promise&lt;void&gt; =&gt; {&#10;    await api.delete(`/watchlist/${id}`);&#10;  }&#10;};&#10;&#10;export const alertService = {&#10;  getAlerts: async (page: number = 0, size: number = 20): Promise&lt;Alert[]&gt; =&gt; {&#10;    const response: AxiosResponse&lt;Alert[]&gt; = await api.get('/alerts', {&#10;      params: { page, size }&#10;    });&#10;    return response.data;&#10;  },&#10;&#10;  getUnreadAlerts: async (): Promise&lt;Alert[]&gt; =&gt; {&#10;    const response: AxiosResponse&lt;Alert[]&gt; = await api.get('/alerts/unread');&#10;    return response.data;&#10;  },&#10;&#10;  getUnreadCount: async (): Promise&lt;number&gt; =&gt; {&#10;    const response: AxiosResponse&lt;number&gt; = await api.get('/alerts/unread/count');&#10;    return response.data;&#10;  },&#10;&#10;  markAsRead: async (alertIds: number[]): Promise&lt;void&gt; =&gt; {&#10;    await api.put('/alerts/mark-read', alertIds);&#10;  }&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/types/index.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/types/index.ts" />
              <option name="updatedContent" value="export interface User {&#10;  id: number;&#10;  username: string;&#10;  email: string;&#10;}&#10;&#10;export interface AuthResponse {&#10;  token: string;&#10;  type: string;&#10;  username: string;&#10;  email: string;&#10;}&#10;&#10;export interface LoginRequest {&#10;  username: string;&#10;  password: string;&#10;}&#10;&#10;export interface RegisterRequest {&#10;  username: string;&#10;  email: string;&#10;  password: string;&#10;}&#10;&#10;export interface WatchedStock {&#10;  id: number;&#10;  symbol: string;&#10;  minPrice?: number;&#10;  maxPrice?: number;&#10;  createdAt: string;&#10;  active: boolean;&#10;}&#10;&#10;export interface WatchedStockRequest {&#10;  symbol: string;&#10;  minPrice?: number;&#10;  maxPrice?: number;&#10;}&#10;&#10;export interface Alert {&#10;  id: number;&#10;  symbol: string;&#10;  currentPrice: number;&#10;  thresholdPrice: number;&#10;  alertType: 'MIN_PRICE_EXCEEDED' | 'MAX_PRICE_EXCEEDED';&#10;  triggeredAt: string;&#10;  read: boolean;&#10;}&#10;&#10;export interface ApiError {&#10;  message: string;&#10;  status: number;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/tsconfig.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/tsconfig.json" />
              <option name="updatedContent" value="{&#10;  &quot;compilerOptions&quot;: {&#10;    &quot;target&quot;: &quot;es5&quot;,&#10;    &quot;lib&quot;: [&#10;      &quot;dom&quot;,&#10;      &quot;dom.iterable&quot;,&#10;      &quot;es6&quot;&#10;    ],&#10;    &quot;allowJs&quot;: true,&#10;    &quot;skipLibCheck&quot;: true,&#10;    &quot;esModuleInterop&quot;: true,&#10;    &quot;allowSyntheticDefaultImports&quot;: true,&#10;    &quot;strict&quot;: true,&#10;    &quot;forceConsistentCasingInFileNames&quot;: true,&#10;    &quot;noFallthroughCasesInSwitch&quot;: true,&#10;    &quot;module&quot;: &quot;esnext&quot;,&#10;    &quot;moduleResolution&quot;: &quot;node&quot;,&#10;    &quot;resolveJsonModule&quot;: true,&#10;    &quot;isolatedModules&quot;: true,&#10;    &quot;noEmit&quot;: true,&#10;    &quot;jsx&quot;: &quot;react-jsx&quot;&#10;  },&#10;  &quot;include&quot;: [&#10;    &quot;src&quot;&#10;  ]&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pom.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;        &lt;version&gt;3.2.0&lt;/version&gt;&#10;        &lt;relativePath/&gt;&#10;    &lt;/parent&gt;&#10;&#10;    &lt;groupId&gt;org.example&lt;/groupId&gt;&#10;    &lt;artifactId&gt;StockWatch&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#10;    &lt;packaging&gt;jar&lt;/packaging&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;maven.compiler.source&gt;21&lt;/maven.compiler.source&gt;&#10;        &lt;maven.compiler.target&gt;21&lt;/maven.compiler.target&gt;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;        &lt;java.version&gt;21&lt;/java.version&gt;&#10;    &lt;/properties&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;            &lt;scope&gt;runtime&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;&#10;            &lt;artifactId&gt;flyway-core&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jjwt-api&lt;/artifactId&gt;&#10;            &lt;version&gt;0.11.5&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jjwt-impl&lt;/artifactId&gt;&#10;            &lt;version&gt;0.11.5&lt;/version&gt;&#10;            &lt;scope&gt;runtime&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jjwt-jackson&lt;/artifactId&gt;&#10;            &lt;version&gt;0.11.5&lt;/version&gt;&#10;            &lt;scope&gt;runtime&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springdoc&lt;/groupId&gt;&#10;            &lt;artifactId&gt;springdoc-openapi-starter-webmvc-ui&lt;/artifactId&gt;&#10;            &lt;version&gt;2.2.0&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.testcontainers&lt;/groupId&gt;&#10;            &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;&#10;            &lt;version&gt;1.17.6&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.testcontainers&lt;/groupId&gt;&#10;            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;            &lt;version&gt;1.17.6&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&#10;&lt;/project&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;        &lt;version&gt;3.2.0&lt;/version&gt;&#10;        &lt;relativePath/&gt;&#10;    &lt;/parent&gt;&#10;&#10;    &lt;groupId&gt;org.example&lt;/groupId&gt;&#10;    &lt;artifactId&gt;StockWatch&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#10;    &lt;packaging&gt;jar&lt;/packaging&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;maven.compiler.source&gt;21&lt;/maven.compiler.source&gt;&#10;        &lt;maven.compiler.target&gt;21&lt;/maven.compiler.target&gt;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;        &lt;java.version&gt;21&lt;/java.version&gt;&#10;    &lt;/properties&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;            &lt;scope&gt;runtime&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.h2database&lt;/groupId&gt;&#10;            &lt;artifactId&gt;h2&lt;/artifactId&gt;&#10;            &lt;scope&gt;runtime&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;&#10;            &lt;artifactId&gt;flyway-core&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jjwt-api&lt;/artifactId&gt;&#10;            &lt;version&gt;0.11.5&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jjwt-impl&lt;/artifactId&gt;&#10;            &lt;version&gt;0.11.5&lt;/version&gt;&#10;            &lt;scope&gt;runtime&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jjwt-jackson&lt;/artifactId&gt;&#10;            &lt;version&gt;0.11.5&lt;/version&gt;&#10;            &lt;scope&gt;runtime&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springdoc&lt;/groupId&gt;&#10;            &lt;artifactId&gt;springdoc-openapi-starter-webmvc-ui&lt;/artifactId&gt;&#10;            &lt;version&gt;2.2.0&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.testcontainers&lt;/groupId&gt;&#10;            &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;&#10;            &lt;version&gt;1.17.6&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.testcontainers&lt;/groupId&gt;&#10;            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;            &lt;version&gt;1.17.6&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/Main.java" />
              <option name="originalContent" value="package org.example;&#10;&#10;//TIP To &lt;b&gt;Run&lt;/b&gt; code, press &lt;shortcut actionId=&quot;Run&quot;/&gt; or&#10;// click the &lt;icon src=&quot;AllIcons.Actions.Execute&quot;/&gt; icon in the gutter.&#10;public class Main {&#10;    public static void main(String[] args) {&#10;&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.example;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;import org.springframework.scheduling.annotation.EnableScheduling;&#10;&#10;@SpringBootApplication&#10;@EnableScheduling&#10;public class StockWatchApplication {&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(StockWatchApplication.class, args);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/config/OpenApiConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/config/OpenApiConfig.java" />
              <option name="updatedContent" value="package org.example.config;&#10;&#10;import io.swagger.v3.oas.annotations.OpenAPIDefinition;&#10;import io.swagger.v3.oas.annotations.enums.SecuritySchemeType;&#10;import io.swagger.v3.oas.annotations.info.Contact;&#10;import io.swagger.v3.oas.annotations.info.Info;&#10;import io.swagger.v3.oas.annotations.security.SecurityScheme;&#10;import io.swagger.v3.oas.annotations.servers.Server;&#10;import org.springframework.context.annotation.Configuration;&#10;&#10;@Configuration&#10;@OpenAPIDefinition(&#10;    info = @Info(&#10;        title = &quot;StockWatch API&quot;,&#10;        version = &quot;1.0.0&quot;,&#10;        description = &quot;Real-time Stock Monitoring and Alert System API&quot;,&#10;        contact = @Contact(&#10;            name = &quot;StockWatch Team&quot;,&#10;            email = &quot;support@stockwatch.com&quot;&#10;        )&#10;    ),&#10;    servers = {&#10;        @Server(url = &quot;http://localhost:8080&quot;, description = &quot;Development server&quot;),&#10;        @Server(url = &quot;https://api.stockwatch.com&quot;, description = &quot;Production server&quot;)&#10;    }&#10;)&#10;@SecurityScheme(&#10;    name = &quot;bearerAuth&quot;,&#10;    type = SecuritySchemeType.HTTP,&#10;    bearerFormat = &quot;JWT&quot;,&#10;    scheme = &quot;bearer&quot;&#10;)&#10;public class OpenApiConfig {&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/config/SecurityConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/config/SecurityConfig.java" />
              <option name="updatedContent" value="package org.example.config;&#10;&#10;import org.example.security.JwtAuthenticationFilter;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.authentication.AuthenticationManager;&#10;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;&#10;import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;&#10;import org.springframework.security.config.http.SessionCreationPolicy;&#10;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.security.web.SecurityFilterChain;&#10;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;&#10;import org.springframework.web.cors.CorsConfiguration;&#10;import org.springframework.web.cors.CorsConfigurationSource;&#10;import org.springframework.web.cors.UrlBasedCorsConfigurationSource;&#10;&#10;import java.util.Arrays;&#10;&#10;@Configuration&#10;@EnableWebSecurity&#10;@EnableMethodSecurity(prePostEnabled = true)&#10;public class SecurityConfig {&#10;    &#10;    @Autowired&#10;    private JwtAuthenticationFilter jwtAuthenticationFilter;&#10;    &#10;    @Bean&#10;    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {&#10;        http.csrf(csrf -&gt; csrf.disable())&#10;            .cors(cors -&gt; cors.configurationSource(corsConfigurationSource()))&#10;            .sessionManagement(session -&gt; session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))&#10;            .authorizeHttpRequests(auth -&gt; auth&#10;                .requestMatchers(&quot;/api/auth/**&quot;).permitAll()&#10;                .requestMatchers(&quot;/swagger-ui/**&quot;, &quot;/api-docs/**&quot;, &quot;/swagger-ui.html&quot;).permitAll()&#10;                .requestMatchers(&quot;/actuator/**&quot;).permitAll()&#10;                .anyRequest().authenticated()&#10;            )&#10;            .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);&#10;        &#10;        return http.build();&#10;    }&#10;    &#10;    @Bean&#10;    public PasswordEncoder passwordEncoder() {&#10;        return new BCryptPasswordEncoder();&#10;    }&#10;    &#10;    @Bean&#10;    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {&#10;        return config.getAuthenticationManager();&#10;    }&#10;    &#10;    @Bean&#10;    public CorsConfigurationSource corsConfigurationSource() {&#10;        CorsConfiguration configuration = new CorsConfiguration();&#10;        configuration.setAllowedOriginPatterns(Arrays.asList(&quot;*&quot;));&#10;        configuration.setAllowedMethods(Arrays.asList(&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;, &quot;OPTIONS&quot;));&#10;        configuration.setAllowedHeaders(Arrays.asList(&quot;*&quot;));&#10;        configuration.setAllowCredentials(true);&#10;        &#10;        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();&#10;        source.registerCorsConfiguration(&quot;/**&quot;, configuration);&#10;        return source;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/controller/AlertController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/controller/AlertController.java" />
              <option name="updatedContent" value="package org.example.controller;&#10;&#10;import io.swagger.v3.oas.annotations.Operation;&#10;import io.swagger.v3.oas.annotations.security.SecurityRequirement;&#10;import io.swagger.v3.oas.annotations.tags.Tag;&#10;import org.example.dto.AlertResponse;&#10;import org.example.service.AlertService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.security.core.annotation.AuthenticationPrincipal;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/alerts&quot;)&#10;@Tag(name = &quot;Alerts&quot;, description = &quot;Manage stock price alerts&quot;)&#10;@SecurityRequirement(name = &quot;bearerAuth&quot;)&#10;public class AlertController {&#10;    &#10;    @Autowired&#10;    private AlertService alertService;&#10;    &#10;    @GetMapping&#10;    @Operation(summary = &quot;Get user's alerts with pagination&quot;)&#10;    public ResponseEntity&lt;List&lt;AlertResponse&gt;&gt; getAlerts(&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;20&quot;) int size,&#10;            @AuthenticationPrincipal UserDetails userDetails) {&#10;        List&lt;AlertResponse&gt; alerts = alertService.getUserAlerts(userDetails, page, size);&#10;        return ResponseEntity.ok(alerts);&#10;    }&#10;    &#10;    @GetMapping(&quot;/unread&quot;)&#10;    @Operation(summary = &quot;Get unread alerts&quot;)&#10;    public ResponseEntity&lt;List&lt;AlertResponse&gt;&gt; getUnreadAlerts(&#10;            @AuthenticationPrincipal UserDetails userDetails) {&#10;        List&lt;AlertResponse&gt; unreadAlerts = alertService.getUnreadAlerts(userDetails);&#10;        return ResponseEntity.ok(unreadAlerts);&#10;    }&#10;    &#10;    @GetMapping(&quot;/unread/count&quot;)&#10;    @Operation(summary = &quot;Get count of unread alerts&quot;)&#10;    public ResponseEntity&lt;Long&gt; getUnreadCount(&#10;            @AuthenticationPrincipal UserDetails userDetails) {&#10;        long count = alertService.getUnreadCount(userDetails);&#10;        return ResponseEntity.ok(count);&#10;    }&#10;    &#10;    @PutMapping(&quot;/mark-read&quot;)&#10;    @Operation(summary = &quot;Mark alerts as read&quot;)&#10;    public ResponseEntity&lt;Void&gt; markAlertsAsRead(&#10;            @RequestBody List&lt;Long&gt; alertIds,&#10;            @AuthenticationPrincipal UserDetails userDetails) {&#10;        try {&#10;            alertService.markAlertsAsRead(alertIds, userDetails);&#10;            return ResponseEntity.ok().build();&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/controller/AuthController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/controller/AuthController.java" />
              <option name="updatedContent" value="package org.example.controller;&#10;&#10;import io.swagger.v3.oas.annotations.Operation;&#10;import io.swagger.v3.oas.annotations.tags.Tag;&#10;import jakarta.validation.Valid;&#10;import org.example.dto.AuthResponse;&#10;import org.example.dto.LoginRequest;&#10;import org.example.dto.RegisterRequest;&#10;import org.example.service.AuthService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/auth&quot;)&#10;@Tag(name = &quot;Authentication&quot;, description = &quot;User authentication and registration&quot;)&#10;public class AuthController {&#10;    &#10;    @Autowired&#10;    private AuthService authService;&#10;    &#10;    @PostMapping(&quot;/register&quot;)&#10;    @Operation(summary = &quot;Register a new user&quot;)&#10;    public ResponseEntity&lt;AuthResponse&gt; register(@Valid @RequestBody RegisterRequest request) {&#10;        try {&#10;            AuthResponse response = authService.register(request);&#10;            return ResponseEntity.ok(response);&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;    }&#10;    &#10;    @PostMapping(&quot;/login&quot;)&#10;    @Operation(summary = &quot;Login user&quot;)&#10;    public ResponseEntity&lt;AuthResponse&gt; login(@Valid @RequestBody LoginRequest request) {&#10;        try {&#10;            AuthResponse response = authService.login(request);&#10;            return ResponseEntity.ok(response);&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/controller/WatchlistController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/controller/WatchlistController.java" />
              <option name="updatedContent" value="package org.example.controller;&#10;&#10;import io.swagger.v3.oas.annotations.Operation;&#10;import io.swagger.v3.oas.annotations.security.SecurityRequirement;&#10;import io.swagger.v3.oas.annotations.tags.Tag;&#10;import jakarta.validation.Valid;&#10;import org.example.dto.WatchedStockRequest;&#10;import org.example.dto.WatchedStockResponse;&#10;import org.example.service.WatchedStockService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.security.core.annotation.AuthenticationPrincipal;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/watchlist&quot;)&#10;@Tag(name = &quot;Watchlist&quot;, description = &quot;Manage watched stocks&quot;)&#10;@SecurityRequirement(name = &quot;bearerAuth&quot;)&#10;public class WatchlistController {&#10;    &#10;    @Autowired&#10;    private WatchedStockService watchedStockService;&#10;    &#10;    @GetMapping&#10;    @Operation(summary = &quot;Get user's watchlist&quot;)&#10;    public ResponseEntity&lt;List&lt;WatchedStockResponse&gt;&gt; getWatchlist(&#10;            @AuthenticationPrincipal UserDetails userDetails) {&#10;        List&lt;WatchedStockResponse&gt; watchlist = watchedStockService.getUserWatchedStocks(userDetails);&#10;        return ResponseEntity.ok(watchlist);&#10;    }&#10;    &#10;    @PostMapping&#10;    @Operation(summary = &quot;Add stock to watchlist&quot;)&#10;    public ResponseEntity&lt;WatchedStockResponse&gt; addToWatchlist(&#10;            @Valid @RequestBody WatchedStockRequest request,&#10;            @AuthenticationPrincipal UserDetails userDetails) {&#10;        try {&#10;            WatchedStockResponse response = watchedStockService.addWatchedStock(request, userDetails);&#10;            return ResponseEntity.ok(response);&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;    }&#10;    &#10;    @PutMapping(&quot;/{id}&quot;)&#10;    @Operation(summary = &quot;Update watched stock&quot;)&#10;    public ResponseEntity&lt;WatchedStockResponse&gt; updateWatchedStock(&#10;            @PathVariable Long id,&#10;            @Valid @RequestBody WatchedStockRequest request,&#10;            @AuthenticationPrincipal UserDetails userDetails) {&#10;        try {&#10;            WatchedStockResponse response = watchedStockService.updateWatchedStock(id, request, userDetails);&#10;            return ResponseEntity.ok(response);&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;    }&#10;    &#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    @Operation(summary = &quot;Remove stock from watchlist&quot;)&#10;    public ResponseEntity&lt;Void&gt; removeFromWatchlist(&#10;            @PathVariable Long id,&#10;            @AuthenticationPrincipal UserDetails userDetails) {&#10;        try {&#10;            watchedStockService.deleteWatchedStock(id, userDetails);&#10;            return ResponseEntity.ok().build();&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/dto/AlertResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/dto/AlertResponse.java" />
              <option name="updatedContent" value="package org.example.dto;&#10;&#10;import org.example.entity.Alert.AlertType;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDateTime;&#10;&#10;public class AlertResponse {&#10;    private Long id;&#10;    private String symbol;&#10;    private BigDecimal currentPrice;&#10;    private BigDecimal thresholdPrice;&#10;    private AlertType alertType;&#10;    private LocalDateTime triggeredAt;&#10;    private boolean read;&#10;    &#10;    public AlertResponse() {}&#10;    &#10;    public AlertResponse(Long id, String symbol, BigDecimal currentPrice, BigDecimal thresholdPrice,&#10;                        AlertType alertType, LocalDateTime triggeredAt, boolean read) {&#10;        this.id = id;&#10;        this.symbol = symbol;&#10;        this.currentPrice = currentPrice;&#10;        this.thresholdPrice = thresholdPrice;&#10;        this.alertType = alertType;&#10;        this.triggeredAt = triggeredAt;&#10;        this.read = read;&#10;    }&#10;    &#10;    public Long getId() { return id; }&#10;    public void setId(Long id) { this.id = id; }&#10;    &#10;    public String getSymbol() { return symbol; }&#10;    public void setSymbol(String symbol) { this.symbol = symbol; }&#10;    &#10;    public BigDecimal getCurrentPrice() { return currentPrice; }&#10;    public void setCurrentPrice(BigDecimal currentPrice) { this.currentPrice = currentPrice; }&#10;    &#10;    public BigDecimal getThresholdPrice() { return thresholdPrice; }&#10;    public void setThresholdPrice(BigDecimal thresholdPrice) { this.thresholdPrice = thresholdPrice; }&#10;    &#10;    public AlertType getAlertType() { return alertType; }&#10;    public void setAlertType(AlertType alertType) { this.alertType = alertType; }&#10;    &#10;    public LocalDateTime getTriggeredAt() { return triggeredAt; }&#10;    public void setTriggeredAt(LocalDateTime triggeredAt) { this.triggeredAt = triggeredAt; }&#10;    &#10;    public boolean isRead() { return read; }&#10;    public void setRead(boolean read) { this.read = read; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/dto/AuthResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/dto/AuthResponse.java" />
              <option name="updatedContent" value="package org.example.dto;&#10;&#10;public class AuthResponse {&#10;    private String token;&#10;    private String type = &quot;Bearer&quot;;&#10;    private String username;&#10;    private String email;&#10;    &#10;    public AuthResponse(String token, String username, String email) {&#10;        this.token = token;&#10;        this.username = username;&#10;        this.email = email;&#10;    }&#10;    &#10;    public String getToken() { return token; }&#10;    public void setToken(String token) { this.token = token; }&#10;    &#10;    public String getType() { return type; }&#10;    public void setType(String type) { this.type = type; }&#10;    &#10;    public String getUsername() { return username; }&#10;    public void setUsername(String username) { this.username = username; }&#10;    &#10;    public String getEmail() { return email; }&#10;    public void setEmail(String email) { this.email = email; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/dto/LoginRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/dto/LoginRequest.java" />
              <option name="updatedContent" value="package org.example.dto;&#10;&#10;import jakarta.validation.constraints.NotBlank;&#10;&#10;public class LoginRequest {&#10;    &#10;    @NotBlank(message = &quot;Username is required&quot;)&#10;    private String username;&#10;    &#10;    @NotBlank(message = &quot;Password is required&quot;)&#10;    private String password;&#10;    &#10;    public LoginRequest() {}&#10;    &#10;    public LoginRequest(String username, String password) {&#10;        this.username = username;&#10;        this.password = password;&#10;    }&#10;    &#10;    public String getUsername() { return username; }&#10;    public void setUsername(String username) { this.username = username; }&#10;    &#10;    public String getPassword() { return password; }&#10;    public void setPassword(String password) { this.password = password; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/dto/RegisterRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/dto/RegisterRequest.java" />
              <option name="updatedContent" value="package org.example.dto;&#10;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.Size;&#10;&#10;public class RegisterRequest {&#10;    &#10;    @NotBlank(message = &quot;Username is required&quot;)&#10;    @Size(min = 3, max = 50, message = &quot;Username must be between 3 and 50 characters&quot;)&#10;    private String username;&#10;    &#10;    @NotBlank(message = &quot;Email is required&quot;)&#10;    @Email(message = &quot;Email should be valid&quot;)&#10;    private String email;&#10;    &#10;    @NotBlank(message = &quot;Password is required&quot;)&#10;    @Size(min = 6, max = 100, message = &quot;Password must be between 6 and 100 characters&quot;)&#10;    private String password;&#10;    &#10;    public RegisterRequest() {}&#10;    &#10;    public RegisterRequest(String username, String email, String password) {&#10;        this.username = username;&#10;        this.email = email;&#10;        this.password = password;&#10;    }&#10;    &#10;    public String getUsername() { return username; }&#10;    public void setUsername(String username) { this.username = username; }&#10;    &#10;    public String getEmail() { return email; }&#10;    public void setEmail(String email) { this.email = email; }&#10;    &#10;    public String getPassword() { return password; }&#10;    public void setPassword(String password) { this.password = password; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/dto/StockPriceResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/dto/StockPriceResponse.java" />
              <option name="updatedContent" value="package org.example.dto;&#10;&#10;import java.math.BigDecimal;&#10;&#10;public class StockPriceResponse {&#10;    private String symbol;&#10;    private BigDecimal price;&#10;    private String timestamp;&#10;    &#10;    public StockPriceResponse() {}&#10;    &#10;    public StockPriceResponse(String symbol, BigDecimal price, String timestamp) {&#10;        this.symbol = symbol;&#10;        this.price = price;&#10;        this.timestamp = timestamp;&#10;    }&#10;    &#10;    public String getSymbol() { return symbol; }&#10;    public void setSymbol(String symbol) { this.symbol = symbol; }&#10;    &#10;    public BigDecimal getPrice() { return price; }&#10;    public void setPrice(BigDecimal price) { this.price = price; }&#10;    &#10;    public String getTimestamp() { return timestamp; }&#10;    public void setTimestamp(String timestamp) { this.timestamp = timestamp; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/dto/WatchedStockRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/dto/WatchedStockRequest.java" />
              <option name="updatedContent" value="package org.example.dto;&#10;&#10;import jakarta.validation.constraints.DecimalMin;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.NotNull;&#10;import jakarta.validation.constraints.Pattern;&#10;&#10;import java.math.BigDecimal;&#10;&#10;public class WatchedStockRequest {&#10;    &#10;    @NotBlank(message = &quot;Stock symbol is required&quot;)&#10;    @Pattern(regexp = &quot;^[A-Z]{1,5}$&quot;, message = &quot;Stock symbol must be 1-5 uppercase letters&quot;)&#10;    private String symbol;&#10;    &#10;    @DecimalMin(value = &quot;0.01&quot;, message = &quot;Minimum price must be greater than 0&quot;)&#10;    private BigDecimal minPrice;&#10;    &#10;    @DecimalMin(value = &quot;0.01&quot;, message = &quot;Maximum price must be greater than 0&quot;)&#10;    private BigDecimal maxPrice;&#10;    &#10;    public WatchedStockRequest() {}&#10;    &#10;    public WatchedStockRequest(String symbol, BigDecimal minPrice, BigDecimal maxPrice) {&#10;        this.symbol = symbol;&#10;        this.minPrice = minPrice;&#10;        this.maxPrice = maxPrice;&#10;    }&#10;    &#10;    public String getSymbol() { return symbol; }&#10;    public void setSymbol(String symbol) { this.symbol = symbol; }&#10;    &#10;    public BigDecimal getMinPrice() { return minPrice; }&#10;    public void setMinPrice(BigDecimal minPrice) { this.minPrice = minPrice; }&#10;    &#10;    public BigDecimal getMaxPrice() { return maxPrice; }&#10;    public void setMaxPrice(BigDecimal maxPrice) { this.maxPrice = maxPrice; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/dto/WatchedStockResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/dto/WatchedStockResponse.java" />
              <option name="updatedContent" value="package org.example.dto;&#10;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDateTime;&#10;&#10;public class WatchedStockResponse {&#10;    private Long id;&#10;    private String symbol;&#10;    private BigDecimal minPrice;&#10;    private BigDecimal maxPrice;&#10;    private LocalDateTime createdAt;&#10;    private boolean active;&#10;    &#10;    public WatchedStockResponse() {}&#10;    &#10;    public WatchedStockResponse(Long id, String symbol, BigDecimal minPrice, BigDecimal maxPrice, &#10;                              LocalDateTime createdAt, boolean active) {&#10;        this.id = id;&#10;        this.symbol = symbol;&#10;        this.minPrice = minPrice;&#10;        this.maxPrice = maxPrice;&#10;        this.createdAt = createdAt;&#10;        this.active = active;&#10;    }&#10;    &#10;    public Long getId() { return id; }&#10;    public void setId(Long id) { this.id = id; }&#10;    &#10;    public String getSymbol() { return symbol; }&#10;    public void setSymbol(String symbol) { this.symbol = symbol; }&#10;    &#10;    public BigDecimal getMinPrice() { return minPrice; }&#10;    public void setMinPrice(BigDecimal minPrice) { this.minPrice = minPrice; }&#10;    &#10;    public BigDecimal getMaxPrice() { return maxPrice; }&#10;    public void setMaxPrice(BigDecimal maxPrice) { this.maxPrice = maxPrice; }&#10;    &#10;    public LocalDateTime getCreatedAt() { return createdAt; }&#10;    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }&#10;    &#10;    public boolean isActive() { return active; }&#10;    public void setActive(boolean active) { this.active = active; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/entity/Alert.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/entity/Alert.java" />
              <option name="updatedContent" value="package org.example.entity;&#10;&#10;import jakarta.persistence.*;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDateTime;&#10;&#10;@Entity&#10;@Table(name = &quot;alerts&quot;)&#10;public class Alert {&#10;    &#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;    &#10;    @Column(name = &quot;current_price&quot;, nullable = false)&#10;    private BigDecimal currentPrice;&#10;    &#10;    @Column(name = &quot;threshold_price&quot;, nullable = false)&#10;    private BigDecimal thresholdPrice;&#10;    &#10;    @Enumerated(EnumType.STRING)&#10;    @Column(name = &quot;alert_type&quot;, nullable = false)&#10;    private AlertType alertType;&#10;    &#10;    @Column(name = &quot;triggered_at&quot;, nullable = false)&#10;    private LocalDateTime triggeredAt;&#10;    &#10;    @Column(name = &quot;is_read&quot;)&#10;    private boolean read = false;&#10;    &#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;user_id&quot;, nullable = false)&#10;    private User user;&#10;    &#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;watched_stock_id&quot;, nullable = false)&#10;    private WatchedStock watchedStock;&#10;    &#10;    @PrePersist&#10;    protected void onCreate() {&#10;        if (triggeredAt == null) {&#10;            triggeredAt = LocalDateTime.now();&#10;        }&#10;    }&#10;    &#10;    public Alert() {}&#10;    &#10;    public Alert(BigDecimal currentPrice, BigDecimal thresholdPrice, AlertType alertType, User user, WatchedStock watchedStock) {&#10;        this.currentPrice = currentPrice;&#10;        this.thresholdPrice = thresholdPrice;&#10;        this.alertType = alertType;&#10;        this.user = user;&#10;        this.watchedStock = watchedStock;&#10;    }&#10;    &#10;    public enum AlertType {&#10;        MIN_PRICE_EXCEEDED,&#10;        MAX_PRICE_EXCEEDED&#10;    }&#10;    &#10;    public Long getId() { return id; }&#10;    public void setId(Long id) { this.id = id; }&#10;    &#10;    public BigDecimal getCurrentPrice() { return currentPrice; }&#10;    public void setCurrentPrice(BigDecimal currentPrice) { this.currentPrice = currentPrice; }&#10;    &#10;    public BigDecimal getThresholdPrice() { return thresholdPrice; }&#10;    public void setThresholdPrice(BigDecimal thresholdPrice) { this.thresholdPrice = thresholdPrice; }&#10;    &#10;    public AlertType getAlertType() { return alertType; }&#10;    public void setAlertType(AlertType alertType) { this.alertType = alertType; }&#10;    &#10;    public LocalDateTime getTriggeredAt() { return triggeredAt; }&#10;    public void setTriggeredAt(LocalDateTime triggeredAt) { this.triggeredAt = triggeredAt; }&#10;    &#10;    public boolean isRead() { return read; }&#10;    public void setRead(boolean read) { this.read = read; }&#10;    &#10;    public User getUser() { return user; }&#10;    public void setUser(User user) { this.user = user; }&#10;    &#10;    public WatchedStock getWatchedStock() { return watchedStock; }&#10;    public void setWatchedStock(WatchedStock watchedStock) { this.watchedStock = watchedStock; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/entity/User.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/entity/User.java" />
              <option name="updatedContent" value="package org.example.entity;&#10;&#10;import jakarta.persistence.*;&#10;import org.springframework.security.core.GrantedAuthority;&#10;import org.springframework.security.core.authority.SimpleGrantedAuthority;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.Collection;&#10;import java.util.List;&#10;&#10;@Entity&#10;@Table(name = &quot;users&quot;)&#10;public class User implements UserDetails {&#10;    &#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;    &#10;    @Column(unique = true, nullable = false)&#10;    private String username;&#10;    &#10;    @Column(unique = true, nullable = false)&#10;    private String email;&#10;    &#10;    @Column(nullable = false)&#10;    private String password;&#10;    &#10;    @Column(name = &quot;created_at&quot;)&#10;    private LocalDateTime createdAt;&#10;    &#10;    @Column(name = &quot;is_enabled&quot;)&#10;    private boolean enabled = true;&#10;    &#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)&#10;    private List&lt;WatchedStock&gt; watchedStocks;&#10;    &#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)&#10;    private List&lt;Alert&gt; alerts;&#10;    &#10;    @PrePersist&#10;    protected void onCreate() {&#10;        createdAt = LocalDateTime.now();&#10;    }&#10;    &#10;    public User() {}&#10;    &#10;    public User(String username, String email, String password) {&#10;        this.username = username;&#10;        this.email = email;&#10;        this.password = password;&#10;    }&#10;&#10;    @Override&#10;    public Collection&lt;? extends GrantedAuthority&gt; getAuthorities() {&#10;        return List.of(new SimpleGrantedAuthority(&quot;ROLE_USER&quot;));&#10;    }&#10;&#10;    @Override&#10;    public boolean isAccountNonExpired() {&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public boolean isAccountNonLocked() {&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public boolean isCredentialsNonExpired() {&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public boolean isEnabled() {&#10;        return enabled;&#10;    }&#10;    &#10;    public Long getId() { return id; }&#10;    public void setId(Long id) { this.id = id; }&#10;    &#10;    public String getUsername() { return username; }&#10;    public void setUsername(String username) { this.username = username; }&#10;    &#10;    public String getEmail() { return email; }&#10;    public void setEmail(String email) { this.email = email; }&#10;    &#10;    public String getPassword() { return password; }&#10;    public void setPassword(String password) { this.password = password; }&#10;    &#10;    public LocalDateTime getCreatedAt() { return createdAt; }&#10;    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }&#10;    &#10;    public void setEnabled(boolean enabled) { this.enabled = enabled; }&#10;    &#10;    public List&lt;WatchedStock&gt; getWatchedStocks() { return watchedStocks; }&#10;    public void setWatchedStocks(List&lt;WatchedStock&gt; watchedStocks) { this.watchedStocks = watchedStocks; }&#10;    &#10;    public List&lt;Alert&gt; getAlerts() { return alerts; }&#10;    public void setAlerts(List&lt;Alert&gt; alerts) { this.alerts = alerts; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/entity/WatchedStock.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/entity/WatchedStock.java" />
              <option name="updatedContent" value="package org.example.entity;&#10;&#10;import jakarta.persistence.*;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;&#10;@Entity&#10;@Table(name = &quot;watched_stocks&quot;)&#10;public class WatchedStock {&#10;    &#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;    &#10;    @Column(nullable = false)&#10;    private String symbol;&#10;    &#10;    @Column(name = &quot;min_price&quot;)&#10;    private BigDecimal minPrice;&#10;    &#10;    @Column(name = &quot;max_price&quot;)&#10;    private BigDecimal maxPrice;&#10;    &#10;    @Column(name = &quot;created_at&quot;)&#10;    private LocalDateTime createdAt;&#10;    &#10;    @Column(name = &quot;is_active&quot;)&#10;    private boolean active = true;&#10;    &#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;user_id&quot;, nullable = false)&#10;    private User user;&#10;    &#10;    @OneToMany(mappedBy = &quot;watchedStock&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)&#10;    private List&lt;Alert&gt; alerts;&#10;    &#10;    @PrePersist&#10;    protected void onCreate() {&#10;        createdAt = LocalDateTime.now();&#10;    }&#10;    &#10;    public WatchedStock() {}&#10;    &#10;    public WatchedStock(String symbol, BigDecimal minPrice, BigDecimal maxPrice, User user) {&#10;        this.symbol = symbol;&#10;        this.minPrice = minPrice;&#10;        this.maxPrice = maxPrice;&#10;        this.user = user;&#10;    }&#10;    &#10;    public Long getId() { return id; }&#10;    public void setId(Long id) { this.id = id; }&#10;    &#10;    public String getSymbol() { return symbol; }&#10;    public void setSymbol(String symbol) { this.symbol = symbol; }&#10;    &#10;    public BigDecimal getMinPrice() { return minPrice; }&#10;    public void setMinPrice(BigDecimal minPrice) { this.minPrice = minPrice; }&#10;    &#10;    public BigDecimal getMaxPrice() { return maxPrice; }&#10;    public void setMaxPrice(BigDecimal maxPrice) { this.maxPrice = maxPrice; }&#10;    &#10;    public LocalDateTime getCreatedAt() { return createdAt; }&#10;    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }&#10;    &#10;    public boolean isActive() { return active; }&#10;    public void setActive(boolean active) { this.active = active; }&#10;    &#10;    public User getUser() { return user; }&#10;    public void setUser(User user) { this.user = user; }&#10;    &#10;    public List&lt;Alert&gt; getAlerts() { return alerts; }&#10;    public void setAlerts(List&lt;Alert&gt; alerts) { this.alerts = alerts; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/repository/AlertRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/repository/AlertRepository.java" />
              <option name="updatedContent" value="package org.example.repository;&#10;&#10;import org.example.entity.Alert;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.Modifying;&#10;import org.springframework.data.jpa.repository.Query;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;&#10;@Repository&#10;public interface AlertRepository extends JpaRepository&lt;Alert, Long&gt; {&#10;    List&lt;Alert&gt; findByUserIdOrderByTriggeredAtDesc(Long userId);&#10;    Page&lt;Alert&gt; findByUserIdOrderByTriggeredAtDesc(Long userId, Pageable pageable);&#10;    List&lt;Alert&gt; findByUserIdAndReadFalseOrderByTriggeredAtDesc(Long userId);&#10;    &#10;    @Query(&quot;SELECT COUNT(a) FROM Alert a WHERE a.user.id = :userId AND a.read = false&quot;)&#10;    long countUnreadByUserId(Long userId);&#10;    &#10;    @Modifying&#10;    @Query(&quot;UPDATE Alert a SET a.read = true WHERE a.user.id = :userId AND a.id IN :alertIds&quot;)&#10;    void markAsRead(Long userId, List&lt;Long&gt; alertIds);&#10;    &#10;    List&lt;Alert&gt; findByTriggeredAtAfter(LocalDateTime dateTime);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/repository/UserRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/repository/UserRepository.java" />
              <option name="updatedContent" value="package org.example.repository;&#10;&#10;import org.example.entity.User;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.Optional;&#10;&#10;@Repository&#10;public interface UserRepository extends JpaRepository&lt;User, Long&gt; {&#10;    Optional&lt;User&gt; findByUsername(String username);&#10;    Optional&lt;User&gt; findByEmail(String email);&#10;    boolean existsByUsername(String username);&#10;    boolean existsByEmail(String email);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/repository/WatchedStockRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/repository/WatchedStockRepository.java" />
              <option name="updatedContent" value="package org.example.repository;&#10;&#10;import org.example.entity.WatchedStock;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.Query;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;&#10;@Repository&#10;public interface WatchedStockRepository extends JpaRepository&lt;WatchedStock, Long&gt; {&#10;    List&lt;WatchedStock&gt; findByUserIdAndActiveTrue(Long userId);&#10;    List&lt;WatchedStock&gt; findByUserId(Long userId);&#10;    &#10;    @Query(&quot;SELECT DISTINCT ws.symbol FROM WatchedStock ws WHERE ws.active = true&quot;)&#10;    List&lt;String&gt; findAllActiveSymbols();&#10;    &#10;    @Query(&quot;SELECT ws FROM WatchedStock ws WHERE ws.active = true&quot;)&#10;    List&lt;WatchedStock&gt; findAllActive();&#10;    &#10;    boolean existsByUserIdAndSymbol(Long userId, String symbol);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/security/JwtAuthenticationFilter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/security/JwtAuthenticationFilter.java" />
              <option name="updatedContent" value="package org.example.security;&#10;&#10;import jakarta.servlet.FilterChain;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;&#10;import org.springframework.security.core.context.SecurityContextHolder;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;import org.springframework.security.core.userdetails.UserDetailsService;&#10;import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;&#10;import org.springframework.stereotype.Component;&#10;import org.springframework.util.StringUtils;&#10;import org.springframework.web.filter.OncePerRequestFilter;&#10;&#10;import java.io.IOException;&#10;&#10;@Component&#10;public class JwtAuthenticationFilter extends OncePerRequestFilter {&#10;    &#10;    @Autowired&#10;    private JwtTokenProvider tokenProvider;&#10;    &#10;    @Autowired&#10;    private UserDetailsService userDetailsService;&#10;    &#10;    @Override&#10;    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, &#10;                                  FilterChain filterChain) throws ServletException, IOException {&#10;        try {&#10;            String jwt = getJwtFromRequest(request);&#10;            &#10;            if (StringUtils.hasText(jwt) &amp;&amp; tokenProvider.validateToken(jwt)) {&#10;                String username = tokenProvider.getUsernameFromToken(jwt);&#10;                &#10;                UserDetails userDetails = userDetailsService.loadUserByUsername(username);&#10;                UsernamePasswordAuthenticationToken authentication = &#10;                    new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());&#10;                authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));&#10;                &#10;                SecurityContextHolder.getContext().setAuthentication(authentication);&#10;            }&#10;        } catch (Exception ex) {&#10;            logger.error(&quot;Could not set user authentication in security context&quot;, ex);&#10;        }&#10;        &#10;        filterChain.doFilter(request, response);&#10;    }&#10;    &#10;    private String getJwtFromRequest(HttpServletRequest request) {&#10;        String bearerToken = request.getHeader(&quot;Authorization&quot;);&#10;        if (StringUtils.hasText(bearerToken) &amp;&amp; bearerToken.startsWith(&quot;Bearer &quot;)) {&#10;            return bearerToken.substring(7);&#10;        }&#10;        return null;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/security/JwtTokenProvider.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/security/JwtTokenProvider.java" />
              <option name="originalContent" value="package org.example.security;&#10;&#10;import io.jsonwebtoken.*;&#10;import io.jsonwebtoken.security.Keys;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.security.core.Authentication;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;import org.springframework.stereotype.Component;&#10;&#10;import javax.crypto.SecretKey;&#10;import java.util.Date;&#10;&#10;@Component&#10;public class JwtTokenProvider {&#10;&#10;    @Value(&quot;${jwt.secret}&quot;)&#10;    private String jwtSecret;&#10;&#10;    @Value(&quot;${jwt.expiration}&quot;)&#10;    private int jwtExpirationInMs;&#10;&#10;    private SecretKey getSigningKey() {&#10;        return Keys.hmacShaKeyFor(jwtSecret.getBytes());&#10;    }&#10;&#10;    public String generateToken(Authentication authentication) {&#10;        UserDetails userPrincipal = (UserDetails) authentication.getPrincipal();&#10;&#10;        Date expiryDate = new Date(System.currentTimeMillis() + jwtExpirationInMs);&#10;&#10;        return Jwts.builder()&#10;                .subject(userPrincipal.getUsername())&#10;                .issuedAt(new Date())&#10;                .expiration(expiryDate)&#10;                .signWith(getSigningKey())&#10;                .compact();&#10;    }&#10;&#10;    public String getUsernameFromToken(String token) {&#10;        Claims claims = Jwts.parser()&#10;                .verifyWith(getSigningKey())&#10;                .build()&#10;                .parseSignedClaims(token)&#10;                .getPayload();&#10;&#10;        return claims.getSubject();&#10;    }&#10;&#10;    public boolean validateToken(String authToken) {&#10;        try {&#10;            Jwts.parser()&#10;                .verifyWith(getSigningKey())&#10;                .build()&#10;                .parseSignedClaims(authToken);&#10;            return true;&#10;        } catch (JwtException | IllegalArgumentException e) {&#10;            return false;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.example.security;&#10;&#10;import io.jsonwebtoken.*;&#10;import io.jsonwebtoken.security.Keys;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.security.core.Authentication;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;import org.springframework.stereotype.Component;&#10;&#10;import javax.crypto.SecretKey;&#10;import java.util.Date;&#10;&#10;@Component&#10;public class JwtTokenProvider {&#10;    &#10;    @Value(&quot;${jwt.secret}&quot;)&#10;    private String jwtSecret;&#10;    &#10;    @Value(&quot;${jwt.expiration}&quot;)&#10;    private int jwtExpirationInMs;&#10;    &#10;    private SecretKey getSigningKey() {&#10;        return Keys.hmacShaKeyFor(jwtSecret.getBytes());&#10;    }&#10;    &#10;    public String generateToken(Authentication authentication) {&#10;        UserDetails userPrincipal = (UserDetails) authentication.getPrincipal();&#10;        &#10;        Date expiryDate = new Date(System.currentTimeMillis() + jwtExpirationInMs);&#10;        &#10;        return Jwts.builder()&#10;                .setSubject(userPrincipal.getUsername())&#10;                .setIssuedAt(new Date())&#10;                .setExpiration(expiryDate)&#10;                .signWith(getSigningKey())&#10;                .compact();&#10;    }&#10;    &#10;    public String getUsernameFromToken(String token) {&#10;        Claims claims = Jwts.parserBuilder()&#10;                .setSigningKey(getSigningKey())&#10;                .build()&#10;                .parseClaimsJws(token)&#10;                .getBody();&#10;        &#10;        return claims.getSubject();&#10;    }&#10;    &#10;    public boolean validateToken(String authToken) {&#10;        try {&#10;            Jwts.parserBuilder()&#10;                .setSigningKey(getSigningKey())&#10;                .build()&#10;                .parseClaimsJws(authToken);&#10;            return true;&#10;        } catch (JwtException | IllegalArgumentException e) {&#10;            return false;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/service/AlertService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/service/AlertService.java" />
              <option name="updatedContent" value="package org.example.service;&#10;&#10;import org.example.dto.AlertResponse;&#10;import org.example.entity.Alert;&#10;import org.example.entity.User;&#10;import org.example.entity.WatchedStock;&#10;import org.example.repository.AlertRepository;&#10;import org.example.repository.UserRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.math.BigDecimal;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;@Service&#10;public class AlertService {&#10;    &#10;    @Autowired&#10;    private AlertRepository alertRepository;&#10;    &#10;    @Autowired&#10;    private UserRepository userRepository;&#10;    &#10;    public void createAlert(BigDecimal currentPrice, BigDecimal thresholdPrice, Alert.AlertType alertType, &#10;                           User user, WatchedStock watchedStock) {&#10;        Alert alert = new Alert(currentPrice, thresholdPrice, alertType, user, watchedStock);&#10;        alertRepository.save(alert);&#10;    }&#10;    &#10;    public List&lt;AlertResponse&gt; getUserAlerts(UserDetails userDetails, int page, int size) {&#10;        User user = userRepository.findByUsername(userDetails.getUsername())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found&quot;));&#10;        &#10;        Page&lt;Alert&gt; alertPage = alertRepository.findByUserIdOrderByTriggeredAtDesc(&#10;            user.getId(), PageRequest.of(page, size));&#10;        &#10;        return alertPage.getContent().stream()&#10;                .map(this::mapToResponse)&#10;                .collect(Collectors.toList());&#10;    }&#10;    &#10;    public List&lt;AlertResponse&gt; getUnreadAlerts(UserDetails userDetails) {&#10;        User user = userRepository.findByUsername(userDetails.getUsername())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found&quot;));&#10;        &#10;        List&lt;Alert&gt; unreadAlerts = alertRepository.findByUserIdAndReadFalseOrderByTriggeredAtDesc(user.getId());&#10;        &#10;        return unreadAlerts.stream()&#10;                .map(this::mapToResponse)&#10;                .collect(Collectors.toList());&#10;    }&#10;    &#10;    public long getUnreadCount(UserDetails userDetails) {&#10;        User user = userRepository.findByUsername(userDetails.getUsername())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found&quot;));&#10;        &#10;        return alertRepository.countUnreadByUserId(user.getId());&#10;    }&#10;    &#10;    @Transactional&#10;    public void markAlertsAsRead(List&lt;Long&gt; alertIds, UserDetails userDetails) {&#10;        User user = userRepository.findByUsername(userDetails.getUsername())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found&quot;));&#10;        &#10;        alertRepository.markAsRead(user.getId(), alertIds);&#10;    }&#10;    &#10;    private AlertResponse mapToResponse(Alert alert) {&#10;        return new AlertResponse(&#10;            alert.getId(),&#10;            alert.getWatchedStock().getSymbol(),&#10;            alert.getCurrentPrice(),&#10;            alert.getThresholdPrice(),&#10;            alert.getAlertType(),&#10;            alert.getTriggeredAt(),&#10;            alert.isRead()&#10;        );&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/service/AuthService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/service/AuthService.java" />
              <option name="updatedContent" value="package org.example.service;&#10;&#10;import org.example.dto.AuthResponse;&#10;import org.example.dto.LoginRequest;&#10;import org.example.dto.RegisterRequest;&#10;import org.example.entity.User;&#10;import org.example.repository.UserRepository;&#10;import org.example.security.JwtTokenProvider;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.security.authentication.AuthenticationManager;&#10;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;&#10;import org.springframework.security.core.Authentication;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.stereotype.Service;&#10;&#10;@Service&#10;public class AuthService {&#10;    &#10;    @Autowired&#10;    private UserRepository userRepository;&#10;    &#10;    @Autowired&#10;    private PasswordEncoder passwordEncoder;&#10;    &#10;    @Autowired&#10;    private AuthenticationManager authenticationManager;&#10;    &#10;    @Autowired&#10;    private JwtTokenProvider tokenProvider;&#10;    &#10;    public AuthResponse register(RegisterRequest request) {&#10;        if (userRepository.existsByUsername(request.getUsername())) {&#10;            throw new RuntimeException(&quot;Username is already taken!&quot;);&#10;        }&#10;        &#10;        if (userRepository.existsByEmail(request.getEmail())) {&#10;            throw new RuntimeException(&quot;Email is already in use!&quot;);&#10;        }&#10;        &#10;        User user = new User();&#10;        user.setUsername(request.getUsername());&#10;        user.setEmail(request.getEmail());&#10;        user.setPassword(passwordEncoder.encode(request.getPassword()));&#10;        &#10;        userRepository.save(user);&#10;        &#10;        Authentication authentication = authenticationManager.authenticate(&#10;            new UsernamePasswordAuthenticationToken(request.getUsername(), request.getPassword())&#10;        );&#10;        &#10;        String token = tokenProvider.generateToken(authentication);&#10;        &#10;        return new AuthResponse(token, user.getUsername(), user.getEmail());&#10;    }&#10;    &#10;    public AuthResponse login(LoginRequest request) {&#10;        Authentication authentication = authenticationManager.authenticate(&#10;            new UsernamePasswordAuthenticationToken(request.getUsername(), request.getPassword())&#10;        );&#10;        &#10;        String token = tokenProvider.generateToken(authentication);&#10;        User user = userRepository.findByUsername(request.getUsername())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found&quot;));&#10;        &#10;        return new AuthResponse(token, user.getUsername(), user.getEmail());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/service/CustomUserDetailsService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/service/CustomUserDetailsService.java" />
              <option name="updatedContent" value="package org.example.service;&#10;&#10;import org.example.entity.User;&#10;import org.example.repository.UserRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;import org.springframework.security.core.userdetails.UserDetailsService;&#10;import org.springframework.security.core.userdetails.UsernameNotFoundException;&#10;import org.springframework.stereotype.Service;&#10;&#10;@Service&#10;public class CustomUserDetailsService implements UserDetailsService {&#10;    &#10;    @Autowired&#10;    private UserRepository userRepository;&#10;    &#10;    @Override&#10;    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {&#10;        User user = userRepository.findByUsername(username)&#10;                .orElseThrow(() -&gt; new UsernameNotFoundException(&quot;User not found with username: &quot; + username));&#10;        &#10;        return user;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/service/StockMonitoringService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/service/StockMonitoringService.java" />
              <option name="updatedContent" value="package org.example.service;&#10;&#10;import org.example.entity.Alert;&#10;import org.example.entity.WatchedStock;&#10;import org.example.repository.WatchedStockRepository;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.scheduling.annotation.Scheduled;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.math.BigDecimal;&#10;import java.util.List;&#10;&#10;@Service&#10;public class StockMonitoringService {&#10;    &#10;    private static final Logger logger = LoggerFactory.getLogger(StockMonitoringService.class);&#10;    &#10;    @Autowired&#10;    private WatchedStockRepository watchedStockRepository;&#10;    &#10;    @Autowired&#10;    private StockPriceService stockPriceService;&#10;    &#10;    @Autowired&#10;    private AlertService alertService;&#10;    &#10;    @Scheduled(fixedDelayString = &quot;${stock.api.fetch-interval}&quot;)&#10;    public void monitorStockPrices() {&#10;        logger.info(&quot;Starting stock price monitoring cycle&quot;);&#10;        &#10;        List&lt;WatchedStock&gt; activeWatchedStocks = watchedStockRepository.findAllActive();&#10;        &#10;        for (WatchedStock watchedStock : activeWatchedStocks) {&#10;            try {&#10;                monitorSingleStock(watchedStock);&#10;            } catch (Exception e) {&#10;                logger.error(&quot;Error monitoring stock {}: {}&quot;, watchedStock.getSymbol(), e.getMessage());&#10;            }&#10;        }&#10;        &#10;        logger.info(&quot;Completed stock price monitoring cycle for {} stocks&quot;, activeWatchedStocks.size());&#10;    }&#10;    &#10;    private void monitorSingleStock(WatchedStock watchedStock) {&#10;        try {&#10;            BigDecimal currentPrice = stockPriceService.getCurrentPrice(watchedStock.getSymbol());&#10;            &#10;            logger.debug(&quot;Current price for {} is {}&quot;, watchedStock.getSymbol(), currentPrice);&#10;            &#10;            boolean alertTriggered = false;&#10;            &#10;            if (watchedStock.getMinPrice() != null &amp;&amp; currentPrice.compareTo(watchedStock.getMinPrice()) &lt;= 0) {&#10;                alertService.createAlert(&#10;                    currentPrice,&#10;                    watchedStock.getMinPrice(),&#10;                    Alert.AlertType.MIN_PRICE_EXCEEDED,&#10;                    watchedStock.getUser(),&#10;                    watchedStock&#10;                );&#10;                alertTriggered = true;&#10;                logger.info(&quot;MIN_PRICE_EXCEEDED alert triggered for {} at price {}&quot;, &#10;                           watchedStock.getSymbol(), currentPrice);&#10;            }&#10;            &#10;            if (watchedStock.getMaxPrice() != null &amp;&amp; currentPrice.compareTo(watchedStock.getMaxPrice()) &gt;= 0) {&#10;                alertService.createAlert(&#10;                    currentPrice,&#10;                    watchedStock.getMaxPrice(),&#10;                    Alert.AlertType.MAX_PRICE_EXCEEDED,&#10;                    watchedStock.getUser(),&#10;                    watchedStock&#10;                );&#10;                alertTriggered = true;&#10;                logger.info(&quot;MAX_PRICE_EXCEEDED alert triggered for {} at price {}&quot;, &#10;                           watchedStock.getSymbol(), currentPrice);&#10;            }&#10;            &#10;            if (!alertTriggered) {&#10;                logger.debug(&quot;No alerts triggered for {} at price {}&quot;, watchedStock.getSymbol(), currentPrice);&#10;            }&#10;            &#10;        } catch (Exception e) {&#10;            logger.error(&quot;Failed to fetch price for {}: {}&quot;, watchedStock.getSymbol(), e.getMessage());&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/service/StockPriceService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/service/StockPriceService.java" />
              <option name="updatedContent" value="package org.example.service;&#10;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.web.reactive.function.client.WebClient;&#10;import org.springframework.web.reactive.function.client.WebClientResponseException;&#10;&#10;import java.math.BigDecimal;&#10;import java.util.Map;&#10;&#10;@Service&#10;public class StockPriceService {&#10;    &#10;    @Value(&quot;${stock.api.base-url}&quot;)&#10;    private String apiBaseUrl;&#10;    &#10;    @Value(&quot;${stock.api.key}&quot;)&#10;    private String apiKey;&#10;    &#10;    private final WebClient webClient;&#10;    &#10;    public StockPriceService() {&#10;        this.webClient = WebClient.builder().build();&#10;    }&#10;    &#10;    public BigDecimal getCurrentPrice(String symbol) {&#10;        try {&#10;            String url = String.format(&quot;%s/query?function=GLOBAL_QUOTE&amp;symbol=%s&amp;apikey=%s&quot;, &#10;                                     apiBaseUrl, symbol, apiKey);&#10;            &#10;            Map&lt;String, Object&gt; response = webClient.get()&#10;                    .uri(url)&#10;                    .retrieve()&#10;                    .bodyToMono(Map.class)&#10;                    .block();&#10;            &#10;            if (response == null || !response.containsKey(&quot;Global Quote&quot;)) {&#10;                throw new RuntimeException(&quot;Invalid API response for symbol: &quot; + symbol);&#10;            }&#10;            &#10;            Map&lt;String, String&gt; quote = (Map&lt;String, String&gt;) response.get(&quot;Global Quote&quot;);&#10;            String priceStr = quote.get(&quot;05. price&quot;);&#10;            &#10;            if (priceStr == null || priceStr.isEmpty()) {&#10;                throw new RuntimeException(&quot;Price not found for symbol: &quot; + symbol);&#10;            }&#10;            &#10;            return new BigDecimal(priceStr);&#10;            &#10;        } catch (WebClientResponseException e) {&#10;            throw new RuntimeException(&quot;Failed to fetch price for symbol: &quot; + symbol + &quot;. Error: &quot; + e.getMessage());&#10;        } catch (Exception e) {&#10;            if (symbol.equals(&quot;DEMO&quot;) || apiKey.equals(&quot;demo&quot;)) {&#10;                return generateMockPrice(symbol);&#10;            }&#10;            throw new RuntimeException(&quot;Error fetching price for symbol: &quot; + symbol + &quot;. &quot; + e.getMessage());&#10;        }&#10;    }&#10;    &#10;    private BigDecimal generateMockPrice(String symbol) {&#10;        int hash = symbol.hashCode();&#10;        double basePrice = 50 + (hash % 200);&#10;        double variation = (System.currentTimeMillis() % 10000) / 100.0 - 50;&#10;        return BigDecimal.valueOf(Math.max(1.0, basePrice + variation)).setScale(2, BigDecimal.ROUND_HALF_UP);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/service/WatchedStockService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/service/WatchedStockService.java" />
              <option name="updatedContent" value="package org.example.service;&#10;&#10;import org.example.dto.WatchedStockRequest;&#10;import org.example.dto.WatchedStockResponse;&#10;import org.example.entity.User;&#10;import org.example.entity.WatchedStock;&#10;import org.example.repository.UserRepository;&#10;import org.example.repository.WatchedStockRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;@Service&#10;public class WatchedStockService {&#10;    &#10;    @Autowired&#10;    private WatchedStockRepository watchedStockRepository;&#10;    &#10;    @Autowired&#10;    private UserRepository userRepository;&#10;    &#10;    public WatchedStockResponse addWatchedStock(WatchedStockRequest request, UserDetails userDetails) {&#10;        User user = userRepository.findByUsername(userDetails.getUsername())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found&quot;));&#10;        &#10;        if (watchedStockRepository.existsByUserIdAndSymbol(user.getId(), request.getSymbol())) {&#10;            throw new RuntimeException(&quot;Stock is already being watched&quot;);&#10;        }&#10;        &#10;        if (request.getMinPrice() != null &amp;&amp; request.getMaxPrice() != null &amp;&amp; &#10;            request.getMinPrice().compareTo(request.getMaxPrice()) &gt;= 0) {&#10;            throw new RuntimeException(&quot;Minimum price must be less than maximum price&quot;);&#10;        }&#10;        &#10;        WatchedStock watchedStock = new WatchedStock();&#10;        watchedStock.setSymbol(request.getSymbol().toUpperCase());&#10;        watchedStock.setMinPrice(request.getMinPrice());&#10;        watchedStock.setMaxPrice(request.getMaxPrice());&#10;        watchedStock.setUser(user);&#10;        &#10;        WatchedStock saved = watchedStockRepository.save(watchedStock);&#10;        &#10;        return mapToResponse(saved);&#10;    }&#10;    &#10;    public List&lt;WatchedStockResponse&gt; getUserWatchedStocks(UserDetails userDetails) {&#10;        User user = userRepository.findByUsername(userDetails.getUsername())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found&quot;));&#10;        &#10;        List&lt;WatchedStock&gt; watchedStocks = watchedStockRepository.findByUserIdAndActiveTrue(user.getId());&#10;        &#10;        return watchedStocks.stream()&#10;                .map(this::mapToResponse)&#10;                .collect(Collectors.toList());&#10;    }&#10;    &#10;    public WatchedStockResponse updateWatchedStock(Long id, WatchedStockRequest request, UserDetails userDetails) {&#10;        User user = userRepository.findByUsername(userDetails.getUsername())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found&quot;));&#10;        &#10;        WatchedStock watchedStock = watchedStockRepository.findById(id)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Watched stock not found&quot;));&#10;        &#10;        if (!watchedStock.getUser().getId().equals(user.getId())) {&#10;            throw new RuntimeException(&quot;Access denied&quot;);&#10;        }&#10;        &#10;        if (request.getMinPrice() != null &amp;&amp; request.getMaxPrice() != null &amp;&amp; &#10;            request.getMinPrice().compareTo(request.getMaxPrice()) &gt;= 0) {&#10;            throw new RuntimeException(&quot;Minimum price must be less than maximum price&quot;);&#10;        }&#10;        &#10;        watchedStock.setMinPrice(request.getMinPrice());&#10;        watchedStock.setMaxPrice(request.getMaxPrice());&#10;        &#10;        WatchedStock updated = watchedStockRepository.save(watchedStock);&#10;        &#10;        return mapToResponse(updated);&#10;    }&#10;    &#10;    public void deleteWatchedStock(Long id, UserDetails userDetails) {&#10;        User user = userRepository.findByUsername(userDetails.getUsername())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found&quot;));&#10;        &#10;        WatchedStock watchedStock = watchedStockRepository.findById(id)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Watched stock not found&quot;));&#10;        &#10;        if (!watchedStock.getUser().getId().equals(user.getId())) {&#10;            throw new RuntimeException(&quot;Access denied&quot;);&#10;        }&#10;        &#10;        watchedStock.setActive(false);&#10;        watchedStockRepository.save(watchedStock);&#10;    }&#10;    &#10;    private WatchedStockResponse mapToResponse(WatchedStock watchedStock) {&#10;        return new WatchedStockResponse(&#10;            watchedStock.getId(),&#10;            watchedStock.getSymbol(),&#10;            watchedStock.getMinPrice(),&#10;            watchedStock.getMaxPrice(),&#10;            watchedStock.getCreatedAt(),&#10;            watchedStock.isActive()&#10;        );&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/application-docker.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/application-docker.yml" />
              <option name="updatedContent" value="spring:&#10;  application:&#10;    name: stockwatch&#10;  &#10;  datasource:&#10;    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://postgres:5432/stockwatch}&#10;    username: ${SPRING_DATASOURCE_USERNAME:stockwatch}&#10;    password: ${SPRING_DATASOURCE_PASSWORD:stockwatch}&#10;    driver-class-name: org.postgresql.Driver&#10;  &#10;  jpa:&#10;    hibernate:&#10;      ddl-auto: validate&#10;    show-sql: false&#10;    properties:&#10;      hibernate:&#10;        dialect: org.hibernate.dialect.PostgreSQLDialect&#10;  &#10;  flyway:&#10;    enabled: true&#10;    baseline-on-migrate: true&#10;    locations: classpath:db/migration&#10;&#10;server:&#10;  port: 8080&#10;&#10;jwt:&#10;  secret: ${JWT_SECRET:mySecretKey123456789012345678901234567890}&#10;  expiration: 86400000&#10;&#10;stock:&#10;  api:&#10;    base-url: ${STOCK_API_BASE_URL:https://www.alphavantage.co}&#10;    key: ${STOCK_API_KEY:demo}&#10;    fetch-interval: ${STOCK_FETCH_INTERVAL:300000}&#10;&#10;logging:&#10;  level:&#10;    org.example: INFO&#10;    org.springframework.security: WARN&#10;  file:&#10;    name: logs/stockwatch.log" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/application.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/application.yml" />
              <option name="originalContent" value="spring:&#10;  application:&#10;    name: stockwatch&#10;&#10;  datasource:&#10;    url: jdbc:postgresql://localhost:5432/stockwatch&#10;    username: stockwatch&#10;    password: stockwatch&#10;    driver-class-name: org.postgresql.Driver&#10;&#10;  jpa:&#10;    hibernate:&#10;      ddl-auto: validate&#10;    show-sql: false&#10;    properties:&#10;      hibernate:&#10;        dialect: org.hibernate.dialect.PostgreSQLDialect&#10;        format_sql: true&#10;&#10;  flyway:&#10;    enabled: true&#10;    baseline-on-migrate: true&#10;    locations: classpath:db/migration&#10;&#10;server:&#10;  port: 8080&#10;&#10;jwt:&#10;  secret: mySecretKey123456789012345678901234567890&#10;  expiration: 86400000&#10;&#10;stock:&#10;  api:&#10;    base-url: https://www.alphavantage.co&#10;    key: demo&#10;    fetch-interval: 300000&#10;&#10;logging:&#10;  level:&#10;    org.example: DEBUG&#10;    org.springframework.security: DEBUG&#10;&#10;springdoc:&#10;  api-docs:&#10;    path: /api-docs&#10;  swagger-ui:&#10;    path: /swagger-ui.html&#10;" />
              <option name="updatedContent" value="spring:&#13;&#10;  application:&#13;&#10;    name: stockwatch&#13;&#10;&#13;&#10;  datasource:&#13;&#10;    url: jdbc:h2:mem:stockwatch&#13;&#10;    username: sa&#13;&#10;    password:&#13;&#10;    driver-class-name: org.h2.Driver&#13;&#10;&#13;&#10;  jpa:&#13;&#10;    hibernate:&#13;&#10;      ddl-auto: create-drop&#13;&#10;    show-sql: false&#13;&#10;    properties:&#13;&#10;      hibernate:&#13;&#10;        dialect: org.hibernate.dialect.H2Dialect&#13;&#10;        format_sql: true&#13;&#10;&#13;&#10;  h2:&#13;&#10;    console:&#13;&#10;      enabled: true&#13;&#10;      path: /h2-console&#13;&#10;&#13;&#10;  flyway:&#13;&#10;    enabled: false&#13;&#10;&#13;&#10;server:&#13;&#10;  port: 8080&#13;&#10;&#13;&#10;jwt:&#13;&#10;  secret: mySecretKey123456789012345678901234567890&#13;&#10;  expiration: 86400000&#13;&#10;&#13;&#10;stock:&#13;&#10;  api:&#13;&#10;    base-url: https://www.alphavantage.co&#13;&#10;    key: demo&#13;&#10;    fetch-interval: 300000&#13;&#10;&#13;&#10;logging:&#13;&#10;  level:&#13;&#10;    org.example: DEBUG&#13;&#10;    org.springframework.security: DEBUG&#13;&#10;&#13;&#10;springdoc:&#13;&#10;  api-docs:&#13;&#10;    path: /api-docs&#13;&#10;  swagger-ui:&#13;&#10;    path: /swagger-ui.html" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/db/migration/V1__Create_initial_schema.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/db/migration/V1__Create_initial_schema.sql" />
              <option name="updatedContent" value="CREATE TABLE users (&#10;    id BIGSERIAL PRIMARY KEY,&#10;    username VARCHAR(50) UNIQUE NOT NULL,&#10;    email VARCHAR(100) UNIQUE NOT NULL,&#10;    password VARCHAR(255) NOT NULL,&#10;    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    is_enabled BOOLEAN DEFAULT TRUE&#10;);&#10;&#10;CREATE TABLE watched_stocks (&#10;    id BIGSERIAL PRIMARY KEY,&#10;    user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,&#10;    symbol VARCHAR(10) NOT NULL,&#10;    min_price DECIMAL(10,2),&#10;    max_price DECIMAL(10,2),&#10;    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    is_active BOOLEAN DEFAULT TRUE,&#10;    CONSTRAINT unique_user_symbol UNIQUE(user_id, symbol)&#10;);&#10;&#10;CREATE TABLE alerts (&#10;    id BIGSERIAL PRIMARY KEY,&#10;    user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,&#10;    watched_stock_id BIGINT NOT NULL REFERENCES watched_stocks(id) ON DELETE CASCADE,&#10;    current_price DECIMAL(10,2) NOT NULL,&#10;    threshold_price DECIMAL(10,2) NOT NULL,&#10;    alert_type VARCHAR(50) NOT NULL CHECK (alert_type IN ('MIN_PRICE_EXCEEDED', 'MAX_PRICE_EXCEEDED')),&#10;    triggered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    is_read BOOLEAN DEFAULT FALSE&#10;);&#10;&#10;CREATE INDEX idx_users_username ON users(username);&#10;CREATE INDEX idx_users_email ON users(email);&#10;CREATE INDEX idx_watched_stocks_user_active ON watched_stocks(user_id, is_active);&#10;CREATE INDEX idx_watched_stocks_symbol ON watched_stocks(symbol);&#10;CREATE INDEX idx_alerts_user_triggered ON alerts(user_id, triggered_at DESC);&#10;CREATE INDEX idx_alerts_user_read ON alerts(user_id, is_read);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/org/example/service/AuthServiceTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/org/example/service/AuthServiceTest.java" />
              <option name="updatedContent" value="package org.example.service;&#10;&#10;import org.example.dto.AuthResponse;&#10;import org.example.dto.LoginRequest;&#10;import org.example.dto.RegisterRequest;&#10;import org.example.entity.User;&#10;import org.example.repository.UserRepository;&#10;import org.example.security.JwtTokenProvider;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.junit.jupiter.api.extension.ExtendWith;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.junit.jupiter.MockitoExtension;&#10;import org.springframework.security.authentication.AuthenticationManager;&#10;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;&#10;import org.springframework.security.core.Authentication;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;&#10;import java.util.Optional;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;import static org.mockito.ArgumentMatchers.*;&#10;import static org.mockito.Mockito.*;&#10;&#10;@ExtendWith(MockitoExtension.class)&#10;class AuthServiceTest {&#10;    &#10;    @Mock&#10;    private UserRepository userRepository;&#10;    &#10;    @Mock&#10;    private PasswordEncoder passwordEncoder;&#10;    &#10;    @Mock&#10;    private AuthenticationManager authenticationManager;&#10;    &#10;    @Mock&#10;    private JwtTokenProvider tokenProvider;&#10;    &#10;    @Mock&#10;    private Authentication authentication;&#10;    &#10;    @InjectMocks&#10;    private AuthService authService;&#10;    &#10;    private RegisterRequest registerRequest;&#10;    private LoginRequest loginRequest;&#10;    private User testUser;&#10;    &#10;    @BeforeEach&#10;    void setUp() {&#10;        registerRequest = new RegisterRequest(&quot;testuser&quot;, &quot;test@example.com&quot;, &quot;password&quot;);&#10;        loginRequest = new LoginRequest(&quot;testuser&quot;, &quot;password&quot;);&#10;        testUser = new User(&quot;testuser&quot;, &quot;test@example.com&quot;, &quot;encodedPassword&quot;);&#10;        testUser.setId(1L);&#10;    }&#10;    &#10;    @Test&#10;    void register_ValidRequest_ReturnsAuthResponse() {&#10;        when(userRepository.existsByUsername(&quot;testuser&quot;)).thenReturn(false);&#10;        when(userRepository.existsByEmail(&quot;test@example.com&quot;)).thenReturn(false);&#10;        when(passwordEncoder.encode(&quot;password&quot;)).thenReturn(&quot;encodedPassword&quot;);&#10;        when(userRepository.save(any(User.class))).thenReturn(testUser);&#10;        when(authenticationManager.authenticate(any(UsernamePasswordAuthenticationToken.class)))&#10;            .thenReturn(authentication);&#10;        when(tokenProvider.generateToken(authentication)).thenReturn(&quot;jwt-token&quot;);&#10;        &#10;        AuthResponse response = authService.register(registerRequest);&#10;        &#10;        assertNotNull(response);&#10;        assertEquals(&quot;jwt-token&quot;, response.getToken());&#10;        assertEquals(&quot;testuser&quot;, response.getUsername());&#10;        assertEquals(&quot;test@example.com&quot;, response.getEmail());&#10;        &#10;        verify(userRepository).save(any(User.class));&#10;    }&#10;    &#10;    @Test&#10;    void register_UsernameExists_ThrowsRuntimeException() {&#10;        when(userRepository.existsByUsername(&quot;testuser&quot;)).thenReturn(true);&#10;        &#10;        assertThrows(RuntimeException.class, () -&gt; authService.register(registerRequest));&#10;    }&#10;    &#10;    @Test&#10;    void login_ValidCredentials_ReturnsAuthResponse() {&#10;        when(authenticationManager.authenticate(any(UsernamePasswordAuthenticationToken.class)))&#10;            .thenReturn(authentication);&#10;        when(tokenProvider.generateToken(authentication)).thenReturn(&quot;jwt-token&quot;);&#10;        when(userRepository.findByUsername(&quot;testuser&quot;)).thenReturn(Optional.of(testUser));&#10;        &#10;        AuthResponse response = authService.login(loginRequest);&#10;        &#10;        assertNotNull(response);&#10;        assertEquals(&quot;jwt-token&quot;, response.getToken());&#10;        assertEquals(&quot;testuser&quot;, response.getUsername());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>