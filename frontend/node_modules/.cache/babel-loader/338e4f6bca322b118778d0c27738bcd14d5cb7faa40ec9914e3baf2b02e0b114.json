{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL\n});\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const authService = {\n  login: async credentials => {\n    const response = await api.post('/auth/login', credentials);\n    return response.data;\n  },\n  register: async userData => {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n  getCurrentUser: () => {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  },\n  isAuthenticated: () => {\n    return !!localStorage.getItem('token');\n  }\n};\nexport const watchlistService = {\n  getWatchlist: async () => {\n    const response = await api.get('/watchlist');\n    return response.data;\n  },\n  addStock: async stockData => {\n    const response = await api.post('/watchlist', stockData);\n    return response.data;\n  },\n  updateStock: async (id, stockData) => {\n    const response = await api.put(`/watchlist/${id}`, stockData);\n    return response.data;\n  },\n  removeStock: async id => {\n    await api.delete(`/watchlist/${id}`);\n  }\n};\nexport const alertService = {\n  getAlerts: async (page = 0, size = 20) => {\n    const response = await api.get('/alerts', {\n      params: {\n        page,\n        size\n      }\n    });\n    return response.data;\n  },\n  getUnreadAlerts: async () => {\n    const response = await api.get('/alerts/unread');\n    return response.data;\n  },\n  getUnreadCount: async () => {\n    const response = await api.get('/alerts/unread/count');\n    return response.data;\n  },\n  markAsRead: async alertIds => {\n    await api.put('/alerts/mark-read', alertIds);\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","authService","login","credentials","response","post","data","register","userData","logout","removeItem","getCurrentUser","user","JSON","parse","isAuthenticated","watchlistService","getWatchlist","get","addStock","stockData","updateStock","id","put","removeStock","delete","alertService","getAlerts","page","size","params","getUnreadAlerts","getUnreadCount","markAsRead","alertIds"],"sources":["C:/Users/szymo/Desktop/progr/StockWatch/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\r\nimport {\r\n  AuthResponse,\r\n  LoginRequest,\r\n  RegisterRequest,\r\n  WatchedStock,\r\n  WatchedStockRequest,\r\n  Alert\r\n} from '../types';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n});\r\n\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nexport const authService = {\r\n  login: async (credentials: LoginRequest): Promise<AuthResponse> => {\r\n    const response: AxiosResponse<AuthResponse> = await api.post('/auth/login', credentials);\r\n    return response.data;\r\n  },\r\n\r\n  register: async (userData: RegisterRequest): Promise<AuthResponse> => {\r\n    const response: AxiosResponse<AuthResponse> = await api.post('/auth/register', userData);\r\n    return response.data;\r\n  },\r\n\r\n  logout: () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n  },\r\n\r\n  getCurrentUser: () => {\r\n    const user = localStorage.getItem('user');\r\n    return user ? JSON.parse(user) : null;\r\n  },\r\n\r\n  isAuthenticated: () => {\r\n    return !!localStorage.getItem('token');\r\n  }\r\n};\r\n\r\nexport const watchlistService = {\r\n  getWatchlist: async (): Promise<WatchedStock[]> => {\r\n    const response: AxiosResponse<WatchedStock[]> = await api.get('/watchlist');\r\n    return response.data;\r\n  },\r\n\r\n  addStock: async (stockData: WatchedStockRequest): Promise<WatchedStock> => {\r\n    const response: AxiosResponse<WatchedStock> = await api.post('/watchlist', stockData);\r\n    return response.data;\r\n  },\r\n\r\n  updateStock: async (id: number, stockData: WatchedStockRequest): Promise<WatchedStock> => {\r\n    const response: AxiosResponse<WatchedStock> = await api.put(`/watchlist/${id}`, stockData);\r\n    return response.data;\r\n  },\r\n\r\n  removeStock: async (id: number): Promise<void> => {\r\n    await api.delete(`/watchlist/${id}`);\r\n  }\r\n};\r\n\r\nexport const alertService = {\r\n  getAlerts: async (page: number = 0, size: number = 20): Promise<Alert[]> => {\r\n    const response: AxiosResponse<Alert[]> = await api.get('/alerts', {\r\n      params: { page, size }\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  getUnreadAlerts: async (): Promise<Alert[]> => {\r\n    const response: AxiosResponse<Alert[]> = await api.get('/alerts/unread');\r\n    return response.data;\r\n  },\r\n\r\n  getUnreadCount: async (): Promise<number> => {\r\n    const response: AxiosResponse<number> = await api.get('/alerts/unread/count');\r\n    return response.data;\r\n  },\r\n\r\n  markAsRead: async (alertIds: number[]): Promise<void> => {\r\n    await api.put('/alerts/mark-read', alertIds);\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}